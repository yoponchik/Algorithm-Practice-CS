1. First create a class
--------------------------------------------

2. Create a STATIC method
	-determine what the input and the output is
		-OUTPUT: # of ways it can travel (INT type)
		-INPUT: [m x n] size of grid (two INT type)
	-static int GridTravel(int m, int n)

--------------------------------------------

3. Create a base case
	-Think of the condition of the gridsize when you arrive
		-It reaches the destination when the grid is 1x1
	-when both m and n are == to 1, then it means it has reached the destination
		-if(m == 1 && n == 1) {return 1;}
	-when either m or n is 0, it means that it is outside the grid
		-if(m ==0 ||n ==0 ) {return 0;}

-----------------------------------------------
4. Find the Recursion
	-moving one block means that we are essentially decreasing the size of the grid to travel.
		-e.g. if 3x3, we move down then the size will be 2x3. Left is 3x2
	-Finding the recursive formula can be done by looking at the tree
		-We know that we can only move down or right, therfore the tree will branch into two 
		-We are pretty much adding the positive base case
		-Think of it like this. The node is the summation of the two possibilities of smaller grid
			-gridTraveller(m-1, n) + gridTraveller(m, n-*1 n)
	-Return it
		-return GridTravel(m-1, n) + GridTravel(m, n);


-----------------------------------------------------
5. Memoize it
	-create a STATIC Dictionary
		-What is the key and the value? In this case, the branch + node and key + value might work.
			-Usually the key: input, value: output		
			-Key: INT type m and n
				-need to use Tuple
			-Value: INT type output
		-static Dictionary<Tuple<int, int>, long> _memo = new Dictionary<Tuple<int, int>, long>();
	-create a Tuple key
		-Tuple<int, int> key; key = Tuple.Create(m,n);

	-Add base case to return the memo values
		-if(_memo.ContainsKey(key)) {return _memo[key];}

	-store the memo
		-_memo[key] = GridTavel(m-1,n) + GridTravel(m, n-1);

	-return the output that is not memoized
		-In this case, (1) we already made a negative base case and (2)everything is already memoized
		

--------------------------------------------------------
IMPORTANT

-TREE ANALYSIS
	-What do the nodes and branch have in relation?
	-What is the base case?
	-What is the negative case?

-Question Type
	-Decision + Combination of path
		-Has Negative and Positive Base case
		-Add up the previous cases

-Memoization
	-When you output, you just have to think "What is memoized and what is not memoized?"

